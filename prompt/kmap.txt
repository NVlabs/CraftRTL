Your goal is to create a high-quality Verilog problem. Specifically, we would like to test the skills of understanding Karnaugh maps and state transition diagrams. The problem description section should be enclosed within <PROBLEM> </PROBLEM> tags. Also include the module header definition in the problem.

Now, please gain inspiration from the following random code snippet to create a high-quality Verilog problem. Remember that the problem you generated must include Karnaugh maps in the format above. The random code snippet MUST be related to the solution. Your problem statement should be short and succinct (no more than 5 sentences) and you MUST generate a Karnaugh map in the problem description. Your problem description should not describe the Karnaugh map in words and should assume that the student need to decipher the Karnaugh map to solve the problem.

Code snippet for inspiration:
```
{code}
```

Below are two examples on how to represent Karnaugh map related questions in purely textual format. You should NOT use the following to generate the problem but only consider the style.
<PROBLEM> 
Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.
// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z
// 000 | 000, 001 | 0
// 001 | 001, 100 | 0
// 010 | 010, 001 | 0
// 011 | 001, 010 | 1
// 100 | 011, 100 | 1
module top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);\n
</PROBLEM>
<PROBLEM> 
Implement the circuit described by the Karnaugh map below.
//        a
// bc   0 1 
//  00 | 0 | 1 |
//  01 | 1 | 1 | 
//  11 | 1 | 1 | 
//  10 | 1 | 1 | 
module top_module(\n\tinput a, \n\tinput b,\n\tinput c,\n\toutput out\n);\n
</PROBLEM>
The problem description section should be enclosed within <PROBLEM> </PROBLEM> tags. You should also include the module header.
